Leetcode Problem Link:  https://leetcode.com/problems/lru-cache/



from collections import OrderedDict
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.d = OrderedDict() 
        self.n = capacity
        
    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.d:
            v = self.d[key]
            self.d.pop(key)
            self.d[key] = v
            return v
        else:
            return -1

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        if key in self.d:
            self.d.pop(key)
            self.d[key] = value
        elif (len(self.d) < self.n):
            self.d[key] = value
        else:
            self.d.pop(list(self.d.keys())[0])
            self.d[key] = value
                
            
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
