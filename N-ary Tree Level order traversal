Given an n-ary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example, given a 3-ary tree:
   1
   3 -> 2 -> 4
   5 -> 6

 We should return its level order traversal:

[
     [1],
     [3,2,4],
     [5,6]
]

 

Note:

    The depth of the tree is at most 1000.
    The total number of nodes is at most 5000
    /*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        List<List<Integer>> res = new ArrayList<>();
        while (!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                Node cur = queue.poll();
                if (cur == null) continue;
                list.add(cur.val);
                for (Node node : cur.children) {
                    queue.offer(node);
                }
            }
            if (list.size() > 0) res.add(list);
        }
        return res;
    }
}
