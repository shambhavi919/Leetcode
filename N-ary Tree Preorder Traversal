Given an n-ary tree, return the preorder traversal of its nodes' values.

For example, given a 3-ary tree:

 1
 3 -> 2 -> 4
 5 -> 6

Return its preorder traversal as: [1,3,5,6,2,4].

Note:
Recursive solution is trivial, could you do it iteratively?
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<Integer> preorder(Node root) {
        //List<Node> children = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        Stack<Node> stack = new Stack<>();
        if(root != null) {
            stack.push(root);
        }
        while(!stack.isEmpty()){
            Node p = stack.pop();
            int l = p.children.size()-1;
            if(p != null){
                list.add(p.val);
                while(l >= 0){
                    stack.push(p.children.get(l));
                    l--;
                    
                    
                }
            }
        }
        return list;
    }
}

